# docker-compose build && docker-compose up -d
version: "3"

volumes:
  ckan_data:
  solr_data:

services:
  ckan:
    container_name: ckan
    sysctls:
      - net.core.somaxconn=1024
    build:
      context: .
    networks:
      - frontend
      - backend
    ports:
      - "0.0.0.0:${CKAN_PORT}:5000"
    env_file:
      - ./.ckan-env
    environment:
      - CKAN_SQLALCHEMY_URL=postgresql://ckan:${POSTGRES_PASSWORD}@${POSTGRES_HOST}:${POSTGRES_PORT}/ckan
      - CKAN_DATASTORE_WRITE_URL=postgresql://ckan:${POSTGRES_PASSWORD}@${POSTGRES_HOST}:${POSTGRES_PORT}/datastore
      - CKAN_DATASTORE_READ_URL=postgresql://datastore_ro:${DATASTORE_READONLY_PASSWORD}@${POSTGRES_HOST}:${POSTGRES_PORT}/datastore
      - CKAN_SOLR_URL=http://solr:8983/solr/ckan
      - CKAN_REDIS_URL=redis://redis:6379/1
      - CKAN_SITE_URL=${CKAN_SITE_URL}
      - CKAN_MAX_UPLOAD_SIZE_MB=${CKAN_MAX_UPLOAD_SIZE_MB}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - DS_RO_PASS=${DATASTORE_READONLY_PASSWORD}
    volumes:
      - ckan_data:/srv/app/data

  ckan-harvest-gather:
    container_name: ckan-harvest-gather
    sysctls:
      - net.core.somaxconn=1024
    build:
      context: .
    command: /bin/sh -c "while true; do sleep 900; ckan -c /srv/app/production.ini harvester gather-consumer; done"
    #restart: on-failure
    networks:
      - frontend
      - backend
    depends_on:
      - ckan
    env_file:
      - ./.ckan-env-harvest
    environment:
      - CKAN_SQLALCHEMY_URL=postgresql://ckan:${POSTGRES_PASSWORD}@${POSTGRES_HOST}:${POSTGRES_PORT}/ckan
      - CKAN_DATASTORE_WRITE_URL=postgresql://ckan:${POSTGRES_PASSWORD}@${POSTGRES_HOST}:${POSTGRES_PORT}/datastore
      - CKAN_DATASTORE_READ_URL=postgresql://datastore_ro:${DATASTORE_READONLY_PASSWORD}@${POSTGRES_HOST}:${POSTGRES_PORT}/datastore
      - CKAN_SOLR_URL=http://solr:8983/solr/ckan
      - CKAN_REDIS_URL=redis://redis:6379/1
      - CKAN_SITE_URL=${CKAN_SITE_URL}
      - CKAN_MAX_UPLOAD_SIZE_MB=${CKAN_MAX_UPLOAD_SIZE_MB}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - DS_RO_PASS=${DATASTORE_READONLY_PASSWORD}
      - SECRET_KEY=${SECRET_KEY}
      
  ckan-harvest-fetch:
    container_name: ckan-harvest-fetch
    sysctls:
      - net.core.somaxconn=1024
    build:
      context: .
    command: /bin/sh -c "while true; do sleep 86400; ckan -c /srv/app/production.ini harvester fetch-consumer; done"
    #restart: on-failure
    networks:
      - frontend
      - backend
    depends_on:
      - ckan
    env_file:
      - ./.ckan-env-harvest
    environment:
      - CKAN_SQLALCHEMY_URL=postgresql://ckan:${POSTGRES_PASSWORD}@${POSTGRES_HOST}:${POSTGRES_PORT}/ckan
      - CKAN_DATASTORE_WRITE_URL=postgresql://ckan:${POSTGRES_PASSWORD}@${POSTGRES_HOST}:${POSTGRES_PORT}/datastore
      - CKAN_DATASTORE_READ_URL=postgresql://datastore_ro:${DATASTORE_READONLY_PASSWORD}@${POSTGRES_HOST}:${POSTGRES_PORT}/datastore
      - CKAN_SOLR_URL=http://solr:8983/solr/ckan
      - CKAN_REDIS_URL=redis://redis:6379/1
      - CKAN_SITE_URL=${CKAN_SITE_URL}
      - CKAN_MAX_UPLOAD_SIZE_MB=${CKAN_MAX_UPLOAD_SIZE_MB}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - DS_RO_PASS=${DATASTORE_READONLY_PASSWORD}
      - SECRET_KEY=${SECRET_KEY}

  ckan-harvest-run:
    container_name: ckan-harvest-run
    sysctls:
      - net.core.somaxconn=1024
    build:
      context: .
    command: /bin/sh -c "while true; do sleep 900; ckan -c /srv/app/production.ini harvester run; done"
    networks:
      - frontend
      - backend
    depends_on:
      - ckan
    env_file:
      - ./.ckan-env-harvest
    environment:
      - CKAN_SQLALCHEMY_URL=postgresql://ckan:${POSTGRES_PASSWORD}@${POSTGRES_HOST}:${POSTGRES_PORT}/ckan
      - CKAN_DATASTORE_WRITE_URL=postgresql://ckan:${POSTGRES_PASSWORD}@${POSTGRES_HOST}:${POSTGRES_PORT}/datastore
      - CKAN_DATASTORE_READ_URL=postgresql://datastore_ro:${DATASTORE_READONLY_PASSWORD}@${POSTGRES_HOST}:${POSTGRES_PORT}/datastore
      - CKAN_SOLR_URL=http://solr:8983/solr/ckan
      - CKAN_REDIS_URL=redis://redis:6379/1
      - CKAN_SITE_URL=${CKAN_SITE_URL}
      - CKAN_MAX_UPLOAD_SIZE_MB=${CKAN_MAX_UPLOAD_SIZE_MB}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - DS_RO_PASS=${DATASTORE_READONLY_PASSWORD}
      
  ckan-harvest-cleanlog:
    container_name: ckan-harvest-cleanlog
    sysctls:
      - net.core.somaxconn=1024
    build:
      context: .
    command: /bin/sh -c "while true; do sleep 86400; ckan -c /srv/app/production.ini harvester clean_harvest_log; done"
    networks:
      - frontend
      - backend
    depends_on:
      - ckan
    env_file:
      - ./.ckan-env-harvest
    environment:
      - CKAN_SQLALCHEMY_URL=postgresql://ckan:${POSTGRES_PASSWORD}@${POSTGRES_HOST}:${POSTGRES_PORT}/ckan
      - CKAN_DATASTORE_WRITE_URL=postgresql://ckan:${POSTGRES_PASSWORD}@${POSTGRES_HOST}:${POSTGRES_PORT}/datastore
      - CKAN_DATASTORE_READ_URL=postgresql://datastore_ro:${DATASTORE_READONLY_PASSWORD}@${POSTGRES_HOST}:${POSTGRES_PORT}/datastore
      - CKAN_SOLR_URL=http://solr:8983/solr/ckan
      - CKAN_REDIS_URL=redis://redis:6379/1
      - CKAN_SITE_URL=${CKAN_SITE_URL}
      - CKAN_MAX_UPLOAD_SIZE_MB=${CKAN_MAX_UPLOAD_SIZE_MB}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - DS_RO_PASS=${DATASTORE_READONLY_PASSWORD}

  datapusher:
    container_name: datapusher
    image: ghcr.io/apteksdi/datapusher:0.0.17
    networks:
      - frontend
      - backend
    ports:
      - "8000:8000"
    environment:
      - DATAPUSHER_MAX_CONTENT_LENGTH=${DATAPUSHER_MAX_CONTENT_LENGTH}
      - DATAPUSHER_CHUNK_SIZE=${DATAPUSHER_CHUNK_SIZE}
      - DATAPUSHER_CHUNK_INSERT_ROWS=${DATAPUSHER_CHUNK_INSERT_ROWS}
      - DATAPUSHER_DOWNLOAD_TIMEOUT=${DATAPUSHER_DOWNLOAD_TIMEOUT}
      - DATAPUSHER_SSL_VERIFY=${DATAPUSHER_SSL_VERIFY}
      - DATAPUSHER_REWRITE_RESOURCES=${DATAPUSHER_REWRITE_RESOURCES}
      - DATAPUSHER_REWRITE_URL=${DATAPUSHER_REWRITE_URL}
      
  solr:
    container_name: solr
    build:
      context: .
      dockerfile: solr/Dockerfile
      args:
        - CKAN_VERSION=2.9.4
    networks:
      - backend
    volumes:
      - solr_data:/opt/solr/server/solr/ckan/data

  redis:
    container_name: redis
    image: redis:${REDIS_VERSION}
    networks:
      - backend

networks:
  frontend:
  backend:
